{"version":3,"sources":["Example.jsx","App.jsx","index.js","Example.module.scss"],"names":["cx","classNames","bind","styles","Example","dismissDisclosure","useRef","disclosureManager","useContext","DisclosureManagerContext","closeDisclosureByProgrammaticClick","document","querySelectorAll","click","closeDisclosureByDismissCallback","current","disclose","timeout","preferredType","size","content","key","component","DisclosureManager","title","text","onClick","then","callbacks","setTimeout","className","isBlock","App","locale","ReactDOM","render","getElementById","module","exports"],"mappings":"2QAMMA,EAAKC,IAAWC,KAAKC,KA6DZC,EA3DC,WACd,IAAMC,EAAoBC,mBACpBC,EAAoBC,qBAAWC,4BAK/BC,EAAqC,WACzCC,SAASC,iBAAiB,8BAA8B,GAAGC,SAMvDC,EAAmC,WACvCT,EAAkBU,WAQdC,EAAW,SAACC,GAChBV,EAAkBS,SAAS,CACzBE,cAAe,QACfC,KAAM,QACNC,QAAS,CACPC,IAAK,UACLC,UACE,6BACE,kBAACC,EAAA,+BAAD,CAAgCC,MAAM,YACtC,kBAAC,IAAD,CAAQC,KAAK,oCAAoCC,QAAShB,IAC1D,kBAAC,IAAD,CAAQe,KAAK,6CAA6CC,QAAShB,QAIxEiB,MAAK,SAACC,GACPvB,EAAkBU,QAAUa,EAAUvB,qBAGpCY,GACFY,WAAWf,EAAkCG,IAIjD,OACE,yBAAKa,UAAW9B,EAAG,YACjB,kBAAC,IAAD,CAAQ+B,SAAO,EAACN,KAAK,0CAA0CC,QAAS,kBAAMV,GAAS,MACvF,kBAAC,IAAD,CAAQe,SAAO,EAACN,KAAK,4CAA4CC,QAAS,kBAAMV,EAAS,OACzF,kBAAC,IAAD,CAAQe,SAAO,EAACN,KAAK,6CAA6CC,QAAS,kBAAMV,EAAS,QAC1F,kBAAC,IAAD,CAAQe,SAAO,EAACN,KAAK,6CAA6CC,QAAS,kBAAMV,EAAS,QAC1F,kBAAC,IAAD,CAAQe,SAAO,EAACN,KAAK,6CAA6CC,QAAS,kBAAMV,EAAS,QAC1F,kBAAC,IAAD,CAAQe,SAAO,EAACN,KAAK,8CAA8CC,QAAS,kBAAMV,EAAS,QAC3F,kBAAC,IAAD,CAAQe,SAAO,EAACN,KAAK,8CAA8CC,QAAS,kBAAMV,EAAS,UCjDlFgB,EARH,kBACV,kBAAC,IAAD,CAAMC,OAAO,MACX,kBAAC,IAAD,KACE,kBAAC,EAAD,SCJNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,U,sCCHjDC,EAAOC,QAAU,CAAC,QAAU,2B","file":"static/js/main.e5625806.chunk.js","sourcesContent":["import React, { useContext, useRef } from 'react';\nimport Button from 'terra-button';\nimport classNames from 'classnames/bind';\nimport { DisclosureManagerContext, DisclosureManagerHeaderAdapter } from 'terra-disclosure-manager';\nimport styles from './Example.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst Example = () => {\n  const dismissDisclosure = useRef();\n  const disclosureManager = useContext(DisclosureManagerContext);\n\n  /**\n   * Closes the modal manager by programmatically clicking the close button.\n   */\n  const closeDisclosureByProgrammaticClick = () => {\n    document.querySelectorAll('button[aria-label=\"Close\"]')[0].click();\n  }\n\n  /**\n   * Closes the modal manager by using the dismissDisclosure callback returned from the disclose promise.\n   */\n  const closeDisclosureByDismissCallback = () => {\n    dismissDisclosure.current();\n  }\n\n  /**\n   * Discloses the modal manager with an optional timeout to close it.\n   * If a timeout is provided the modal will be dismissed after the timeout duration. \n   * @param {number|bool} timeout - The dismiss timeout.\n   */\n  const disclose = (timeout) => {\n    disclosureManager.disclose({\n      preferredType: 'modal',\n      size: 'large',\n      content: {\n        key: 'example',\n        component: (\n          <div>\n            <DisclosureManagerHeaderAdapter title=\"Example\" />\n            <Button text=\"Close Modal by programmatic click\" onClick={closeDisclosureByProgrammaticClick} />\n            <Button text=\"Close Modal by dismiss disclosure callback\" onClick={closeDisclosureByProgrammaticClick} />\n          </div>\n        )\n      }\n    }).then((callbacks) => {\n      dismissDisclosure.current = callbacks.dismissDisclosure;\n    });\n\n    if (timeout) {\n      setTimeout(closeDisclosureByDismissCallback, timeout);\n    }\n  }\n\n  return (\n    <div className={cx('example')}>\n      <Button isBlock text=\"Launch Modal Manager (No close timeout)\" onClick={() => disclose(false)} />\n      <Button isBlock text=\"Launch Modal Manager (10ms close timeout)\" onClick={() => disclose(10)} />\n      <Button isBlock text=\"Launch Modal Manager (100ms close timeout)\" onClick={() => disclose(100)} />\n      <Button isBlock text=\"Launch Modal Manager (200ms close timeout)\" onClick={() => disclose(200)} />\n      <Button isBlock text=\"Launch Modal Manager (300ms close timeout)\" onClick={() => disclose(300)} />\n      <Button isBlock text=\"Launch Modal Manager (1000ms close timeout)\" onClick={() => disclose(1000)} />\n      <Button isBlock text=\"Launch Modal Manager (2000ms close timeout)\" onClick={() => disclose(2000)} />\n    </div>\n  )\n}\n\nexport default Example;\n","import React from 'react';\nimport Base from 'terra-base';\nimport ModalManager from 'terra-modal-manager';\nimport Example from './Example';\n\nconst App = () => (\n  <Base locale=\"en\">\n    <ModalManager>\n      <Example />\n    </ModalManager>\n  </Base>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"example\":\"Example_example__1GrTC\"};"],"sourceRoot":""}